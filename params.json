{"name":"Docs","tagline":"API Reference and Developer Documentation for Kraken.io","body":"* [Getting Started](#getting-started)\r\n* [Optimization Process](#optimization-process)\r\n* [Downloading Images](#downloading-images)\r\n* [Installation](#installation)\r\n* [How To Use](#how-to-use)\r\n* [Wait and Callback URL](#wait-and-callback-url)\r\n  * [Wait Option](#wait-option)\r\n  * [Callback URL](#callback-url)\r\n* [Usage - Image URL](#image-url)\r\n* [Usage - Image Upload](#image-upload)\r\n* [Lossy Optimization](#lossy-optimization)\r\n* [Image Resizing](#image-resizing)\r\n* [WebP Compression](#webp-compression)\r\n* [Amazon S3 and Rackspace Cloud Files Integration](#amazon-s3-and-rackspace-cloud-files)\r\n  * [Amazon S3](#amazon-s3)\r\n  * [Rackspace Cloud Files](#rackspace-cloud-files)\r\n\r\n## Getting Started\r\nTo plug into the power of Kraken API you need to sign up for Kraken API services and obtain your unique API Key and API Secret. You will find those in your Account under the API Credentials section. Once you have set-up your account, you can start using Kraken API in your applications.\r\n\r\n## Optimization Process\r\n\r\n**JPEG Images**\r\n\r\nFor JPEGs Kraken does a vast array of optimizations. It strips all metadata found in a given image, optimizes Huffman tables, converts image to progressive format and tries a variety of custom progressive scans to find best structure per image.\r\n\r\nFor lossy JPEG optimizations we additionaly use `imgmin` library by Ryan Flynn which generates multiple copies of the input image using different quality settings. Then it intelligently picks the one with the best quality to size ratio. This ensures your JPEG image will be at the smallest size with the highest possible quality, without the need for a human to select the optimal image.\r\n\r\n**PNG Images**\r\n\r\nKraken dynamically chooses best compression and optimization algorithms and their optimal settings for a given PNG to ensure an outstanding image quality with the minimum file weight.\r\n\r\n**GIF Images**\r\n\r\nSince Kraken supports GIF to PNG8 conversion and optimization (because PNGs are almost always superior to GIFs) your static GIF images will be returned as optimized PNG files. In this case you have to change file extensions in your websites or applications.\r\n\r\nOptimized GIF animations will always be returned as standard animation GIF files.\r\n\r\n## Downloading Images\r\nRemember - never link to optimized images offered to download. You have to download them first, and then replace them in your websites or applications. Optimized images are available on our servers for one hour only.\r\n\r\n## How to Use\r\n\r\nYou can optimize your images in two ways - by **providing an URL** of the image you want to optimize or by **uploading an image file** directly to Kraken API.\r\n\r\nThe first option (image URL) is great for images that are already in production or any other place on the Internet. The second one (direct upload) is ideal for your deployment process, build script or the on-the-fly processing of your user's uploads where you don't have the images available online yet.\r\n\r\nKraken API accepts HTTPS POST requests only. Note that we offer API access through SSL secured connections, which means you have to use the HTTPS protocol in your requests. Every POST request body must include a well-formed JSON object with mandatory `auth` section conaining your `api_key` and `api_secret`, for example:\r\n\r\n\r\n````js\r\n{\r\n  \"auth\": {\r\n    \"api_key\": \"c1cf24cf4aa6b8833286f9393d30695a\",\r\n    \"api_secret\": \"35c938d191f9a549924e069dc2e67d06c5643724\"\r\n  }\r\n}\r\n````\r\n\r\nDepending on a choosen response option (Wait or Callback URL) in the response body you will find either the optimization ID or optimization results containing a `success` property, file name, original file size, kraked file size, amount of savings and optimized image URL:\r\n\r\n````js\r\n{\r\n  \"success\": true,\r\n  \"file_name\": \"header.jpg\",\r\n  \"original_size\": 324520,\r\n  \"kraked_size\": 165358,\r\n  \"saved_bytes\": 159162,\r\n  \"kraked_url\": \"https://api.kraken.io/ecdfa5c55d5668b1b5fe9e420554c4ee/header.jpg\"\r\n}\r\n````\r\n\r\nIf no saving were realised, the API will return a `\"success\":false` property and a descriptive error message:\r\n\r\n````js\r\n{\r\n  \"success\": false,\r\n  \"error\": \"This image can not be optimized any further\"\r\n}\r\n````\r\n\r\nIf anything goes wrong with the optimization process you will also find the `\"success\":false` property and error message in the response body:\r\n\r\n````js\r\n{\r\n  \"success\": false,\r\n  \"error\": \"Couldn't fetch this image from a given URL\"\r\n}\r\n````\r\n\r\n## Direct Upload\r\nType: `POST` \r\nURL: `https://api.kraken.io/upload`\r\n\r\nKraken allows you to easily upload your images directly to the API. To do so you have to `POST` an image file along with an `auth` JSON object to: `https://api.kraken.io/upload`. Be sure to add a `wait` or `calback_url` flag:\r\n\r\n````js\r\n{\r\n  \"auth\": {\r\n    \"api_key\": \"your-api-key\",\r\n    \"api_secret\": \"your-api-secret\"\r\n  },\r\n  \"wait\": true\r\n}\r\n````\r\n\r\n## Image URL\r\nType: `POST` \r\nURL: `https://api.kraken.io/url`\r\n\r\nIf you want to feed Kraken with URLs to your images add a `url` property along with an `auth` section in your request JSON and post it to: https://api.kraken.io/url. Be sure to add a `wait` or `calback_url` flag:\r\n\r\n````js\r\n{\r\n  \"auth\": {\r\n    \"api_key\": \"your-api-key\",\r\n    \"api_secret\": \"your-api-secret\"\r\n  },\r\n  \"url\": \"http://awesome-website.com/images/header.jpg\",\r\n  \"wait\": true\r\n}\r\n````\r\n\r\nThe server which is serving assets mentioned in the url property must respond with proper `Content-Type` and `Content-Length` headers. Otherwise Kraken API may throw the following errors:\r\n\r\n````js\r\n{\r\n  \"success\": false,\r\n  \"error\": \"Remote file type unknown\"\r\n}\r\n\r\n{\r\n  \"success\": false,\r\n  \"error\": \"Remote file size unknown\"\r\n}\r\n````\r\n\r\n## Wait and Callback URL\r\nKraken gives you two options for fetching optimization results. With the `wait` option set the results will be returned in the response body. With the `callback_url` the results will be posted to the URL specified in your request.\r\n\r\n### Wait\r\nWith the wait option turned on for every request to the API, the connection will be held open until the image has been optimized. Once this is done you will get an immediate response with a JSON object containing your optimization results. To use this option simply set the `\"wait\":true` property in your request.\r\n\r\n**Request:**\r\n````js\r\n{\r\n  \"auth\": {\r\n    \"api_key\": \"your-api-key\",\r\n    \"api_secret\": \"your-api-secret\"\r\n  },\r\n  \"url\": \"http://awesome-website.com/images/header.jpg\",\r\n  \"wait\": true\r\n}\r\n````\r\n\r\n**Response:**\r\n````js\r\n{\r\n  \"success\": true,\r\n  \"file_name\": \"header.jpg\",\r\n  \"original_size\": 324520,\r\n  \"kraked_size\": 165358,\r\n  \"saved_bytes\": 159162,\r\n  \"kraked_url\": \"https://api.kraken.io/d1aacd2a2280c2ffc7b4906a09f78f46/header.jpg\"\r\n}\r\n````\r\n\r\n### Callback URL\r\nWith the Callback URL the HTTPS connection will be terminated immediately and a unique `id` will be returned in the response body. After the optimization is over Kraken will POST a message to the `callback_url` specified in your request. The ID in the response will reflect the ID in the results posted to your Callback URL.\r\n\r\n**Request:**\r\n````js\r\n{\r\n  \"auth\": {\r\n    \"api_key\": \"your-api-key\",\r\n    \"api_secret\": \"your-api-secret\"\r\n  },\r\n  \"url\": \"http://awesome-website.com/images/header.jpg\",\r\n  \"callback_url\": \"http://awesome-website.com/kraken_results\"\r\n}\r\n````\r\n\r\n**Response:**\r\n````js\r\n{\r\n  \"id\": \"18fede37617a787649c3f60b9f1f280d\"\r\n}\r\n````\r\n\r\n**Results posted to Callback URL:**\r\n````js\r\n{\r\n  \"id\": \"18fede37617a787649c3f60b9f1f280d\"\r\n  \"success\": true,\r\n  \"file_name\": \"header.jpg\",\r\n  \"original_size\": 324520,\r\n  \"kraked_size\": 165358,\r\n  \"saved_bytes\": 159162,\r\n  \"kraked_url\": \"https://api.kraken.io/18fede37617a787649c3f60b9f1f280d/header.jpg\"\r\n}\r\n````\r\n\r\n## Image Resizing\r\n\r\nImage resizing option is great for creating thumbnails or preview images in your applications. Kraken will first resize the given image and then optimize it with its vast array of optimization algorithms. The resize option needs a few parameters to be passed, such as the desired `width` and/or `height`, as well as a mandatory `strategy` property. For example:\r\n\r\n````js\r\n{\r\n  \"auth\": {\r\n    \"api_key\": \"c1cf24cf4aa6b8833286f9393d30695a\",\r\n    \"api_secret\": \"35c938d191f9a549924e069dc2e67d06c5643724\"\r\n  },\r\n  \"url\": \"http://awesome-website.com/images/header.jpg\"\r\n  \"resize\": {\r\n    \"width\": 100,\r\n    \"height\": 75,\r\n    \"strategy\": \"crop\"\r\n  }\r\n  \"wait\": true\r\n}\r\n````\r\n\r\nThe `strategy` property can have one of the following values:\r\n\r\n- `exact` - Resize by exact width/height. Aspect ratio will not be maintained.\r\n- `portrait` - Exact width will be set, height will be adjusted according to aspect ratio.\r\n- `landscape` - Exact height will be set, width will be adjusted according to aspect ratio.\r\n- `auto` - The best strategy will be selected for a given image according to its aspect ratio.\r\n- `crop` - This option will crop your images to the exact size you specify with no distortion.\r\n\r\n\r\n## Lossy Optimization\r\n\r\nIf you decide to sacrifice just a small amount of image quality (which in most cases is unnoticeable to the human eye), you will be able to save up to **90%** of the initial file weight. Lossy optimization will give you outstanding results with just a fraction of image quality loss.\r\n\r\nTo use lossy optimization algorithms simply set the `\"lossy\":true` property in your request JSON:\r\n````js\r\n{\r\n  \"auth\": {\r\n    \"api_key\": \"your-api-key\",\r\n    \"api_secret\": \"your-api-secret\"\r\n  },\r\n  \"url\": \"http://awesome-website.com/images/header.jpg\",\r\n  \"wait\": true,\r\n  \"lossy\": true\r\n}\r\n````\r\n\r\n**Lossy optimization of PNG Images**\r\nPNG images will be converted from 24-bit to paletted 8-bit with full alpha channel. This process is called PNG quantization in RGBA format and means the amount of colours used in an image will be reduced to 256 while maintaining all information about alpha transparency.\r\n\r\n**Lossy Optimization of JPEG Images**\r\nFor lossy JPEG optimizations we use [imgmin](https://github.com/rflynn/imgmin) library by Ryan Flynn which generates multiple copies of the input image using different quality settings. Then it intelligently picks the one with the best quality to size ratio. This ensures your JPEG image will be at the smallest size with the highest possible quality, without the need for a human to select the optimal image.\r\n\r\n## WebP Compression\r\n\r\nWebP is a new image format introduced by Google in 2010 which supports both lossy and lossless compression. According to [Google](https://developers.google.com/speed/webp/), WebP lossless images are **26% smaller** in size compared to PNGs and WebP lossy images are **25-34% smaller** in size compared to JPEG images.\r\n\r\nTo recompress your PNG or JPEG files into WebP format simply set `\"webp\": true` flag in your request JSON. You can also optionally set `\"lossy\": true` flag to leverage WebP's lossy compression:\r\n\r\n````js\r\n{\r\n  \"auth\": {\r\n    \"api_key\": \"your-api-key\",\r\n    \"api_secret\": \"your-api-secret\"\r\n  },\r\n  \"url\": \"http://awesome-website.com/images/header.jpg\",\r\n  \"wait\": true,\r\n  \"webp\": true,\r\n  \"lossy\": true\r\n}\r\n````\r\n\r\n## Amazon S3 and Rackspace Cloud Files\r\n\r\nKraken API allows you to store optimized images directly in your S3 bucket or Cloud Files container. With just a few additional parameters your optimized images will be pushed to your external storage in no time.\r\n\r\n### Amazon S3\r\n\r\n**Mandatory Parameters:**\r\n- `key` - Your unique Amazon \"Access Key ID\".\r\n- `secret` - Your unique Amazon \"Secret Access Key\".\r\n- `bucket` - Name of a destination container on your Amazon S3 account.\r\n\r\n**Optional Parameters:**\r\n- `path` - Destination path in your S3 bucket (e.g. `\"images/layout/header.jpg\"`). Defaults to root `\"/\"`.\r\n- `acl` - Permissions of a destination object. This can be `\"public_read\"` or `\"private\"`. Defaults to `\"public_read\"`.\r\n\r\nThe above parameters must be passed in a `s3_store` key:\r\n\r\n````js\r\n{\r\n  \"s3_store\": {\r\n    \"key\": \"your-amazon-access-key\",\r\n    \"secret\": \"your-amazon-secret-key\",\r\n    \"bucket\": \"destination-bucket\"\r\n  }\r\n}\r\n````\r\n\r\nBelow you can find an example of a complete JSON request that uses `s3_store` to push optimized image into your S3 bucket. We will use the url option to feed the API with the URL of the image to be optimized. Note: You must replace the example credentials given below with your own.\r\n\r\n````js\r\n{\r\n  \"auth\": {\r\n    \"api_key\": \"a1ac24cf4aa6b2998712c9393d30695a\",\r\n    \"api_secret\": \"b2aaacb25c1aa1575e59ca7a035b1509e999cba1\"\r\n  },\r\n  \"s3_store\": {\r\n    \"key\": \"AKIAO4AD5J4F1NA33Q12\",\r\n    \"secret\": \"AAwQwJSEgG9WpeCV20GlHI5hGKxKuw5qY80t4CCe\",\r\n    \"bucket\": \"assets\",\r\n    \"path\": \"images/layout/header.jpg\"\r\n  },\r\n  \"url\": \"http://awesome-website.com/images/header.jpg\",\r\n  \"wait\": true\r\n}\r\n````\r\n\r\nThe optimization results will contain a `kraked_url` property which points directly to the optimized file location in your Amazon S3 bucket, for example:\r\n\r\n```\r\nhttp://s3.amazonaws.com/assets/images/layout/header.jpg\r\n```\r\n\r\n### Rackspace Cloud Files\r\n\r\n**Mandatory Parameters:**\r\n- `user` - Your Rackspace username.\r\n- `key` - Your unique Cloud Files API Key.\r\n- `container` - Name of a destination container on your Cloud Files account.\r\n\r\n**Optional Parameters:**\r\n- `path` - Destination path in your container (e.g. `\"images/layout/header.jpg\"`). Defaults to root `\"/\"`.\r\n\r\nThe above parameters must be passed in a `cf_store` key:\r\n\r\n````js\r\n{\r\n  \"cf_store\": {\r\n    \"user\": \"your-rackspace-username\",\r\n    \"key\": \"your-rackspace-api-key\",\r\n    \"container\": \"destination-container\"\r\n  }\r\n}\r\n````\r\n\r\nBelow you can find an example of a complete JSON request that uses `cf_store` to push optimized image into your Cloud Files container. We will use url option to feed the API with a URL of image to be optimized. The below request uses example (fake) credentials - you will need to replace them with your real ones.\r\n\r\n````js\r\n{\r\n  \"auth\": {\r\n    \"api_key\": \"a1ac24cf4aa6b2998712c9393d30695a\",\r\n    \"api_secret\": \"b2aaacb25c1aa1575e59ca7a035b1509e999cba1\"\r\n  },\r\n  \"cf_store\": {\r\n    \"user\": \"Foobar\",\r\n    \"key\": \"12dc6c9147c201f96f20c1dcdc112919\",\r\n    \"container\": \"assets\",\r\n    \"path\": \"images/layout/header.jpg\"\r\n  },\r\n  \"url\": \"http://awesome-website.com/images/header.jpg\",\r\n  \"wait\": true\r\n}\r\n````\r\n\r\nIf your container is CDN-enabled, the optimization results will contain `kraked_url` which points directly to the optimized file location in your Cloud Files container, for example:\r\n\r\n```\r\nhttp://e9ffc04970a26-fdd2d4f11dffd931005c9e8de.r2.cf1.rackcdn.com/images/layout/header.jpg\r\n```\r\n\r\nIf your container is not CDN-enabled `kraked_url` will point to the optimized image URL in the Kraken API.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}